// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(LastaContext))]
    [Migration("20210623102444_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Model.Accommodation", b =>
                {
                    b.Property<int>("AccommodationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccommodationTypeId");

                    b.Property<string>("Address");

                    b.Property<int>("CityId");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("PhotoUrl");

                    b.Property<string>("Telephone");

                    b.Property<string>("WebsiteUrl");

                    b.HasKey("AccommodationId");

                    b.HasIndex("AccommodationTypeId");

                    b.HasIndex("CityId");

                    b.ToTable("Accommodation");
                });

            modelBuilder.Entity("Model.AccommodationAmenity", b =>
                {
                    b.Property<int>("AmenityId");

                    b.Property<int>("AccommodationId");

                    b.HasKey("AmenityId", "AccommodationId");

                    b.HasIndex("AccommodationId");

                    b.ToTable("AccommodationAmenity");
                });

            modelBuilder.Entity("Model.AccommodationType", b =>
                {
                    b.Property<int>("AccommodationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("AccommodationTypeId");

                    b.ToTable("AccommodationType");
                });

            modelBuilder.Entity("Model.Amenity", b =>
                {
                    b.Property<int>("AmenityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmenityTypeId");

                    b.Property<string>("Name");

                    b.HasKey("AmenityId");

                    b.HasIndex("AmenityTypeId");

                    b.ToTable("Amenity");
                });

            modelBuilder.Entity("Model.AmenityType", b =>
                {
                    b.Property<int>("AmenityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("AmenityTypeId");

                    b.ToTable("AmenityType");
                });

            modelBuilder.Entity("Model.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateTo");

                    b.Property<int>("GuideId");

                    b.Property<string>("Name");

                    b.Property<int>("TourId");

                    b.HasKey("BookingId");

                    b.HasIndex("GuideId");

                    b.HasIndex("TourId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("Model.BookingTraveler", b =>
                {
                    b.Property<int>("BookingId");

                    b.Property<int>("TravelerId");

                    b.HasKey("BookingId", "TravelerId");

                    b.HasIndex("TravelerId");

                    b.ToTable("BookingTraveler");
                });

            modelBuilder.Entity("Model.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<string>("GeneralInfo");

                    b.Property<float>("Latitude");

                    b.Property<float>("Longitude");

                    b.Property<string>("Name");

                    b.Property<string>("PhotoUrl");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Model.CitySection", b =>
                {
                    b.Property<int>("CitySectionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<string>("Content");

                    b.Property<string>("Title");

                    b.HasKey("CitySectionId");

                    b.HasIndex("CityId");

                    b.ToTable("CitySection");
                });

            modelBuilder.Entity("Model.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Area");

                    b.Property<string>("CapitalCity");

                    b.Property<string>("Currency");

                    b.Property<string>("FlagUrl");

                    b.Property<string>("GeneralInfo");

                    b.Property<string>("Name");

                    b.Property<DateTime>("NationalDay");

                    b.Property<string>("OfficialLanguage");

                    b.Property<string>("Polity");

                    b.Property<string>("Population");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Model.CountrySection", b =>
                {
                    b.Property<int>("CountrySectionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<int>("CountryId");

                    b.Property<string>("Title");

                    b.HasKey("CountrySectionId");

                    b.HasIndex("CountryId");

                    b.ToTable("CountrySection");
                });

            modelBuilder.Entity("Model.Day", b =>
                {
                    b.Property<int>("DayId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccommodationId");

                    b.Property<string>("Description");

                    b.Property<bool>("IsBIncluded");

                    b.Property<bool>("IsDIncluded");

                    b.Property<bool>("IsLIncluded");

                    b.Property<string>("Name");

                    b.Property<string>("PhotoUrl");

                    b.Property<int?>("ScheduleId");

                    b.Property<int>("TourId");

                    b.HasKey("DayId");

                    b.HasIndex("AccommodationId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("TourId");

                    b.ToTable("Day");
                });

            modelBuilder.Entity("Model.DayCity", b =>
                {
                    b.Property<int>("DayId");

                    b.Property<int>("CityId");

                    b.HasKey("DayId", "CityId");

                    b.HasIndex("CityId");

                    b.ToTable("DayCity");
                });

            modelBuilder.Entity("Model.DayCountry", b =>
                {
                    b.Property<int>("DayId");

                    b.Property<int>("CountryId");

                    b.HasKey("DayId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("DayCountry");
                });

            modelBuilder.Entity("Model.Guide", b =>
                {
                    b.Property<int>("GuideId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bio");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("LastName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PasswordSalt");

                    b.Property<string>("PhotoUrl");

                    b.Property<string>("Username");

                    b.HasKey("GuideId");

                    b.ToTable("Guide");
                });

            modelBuilder.Entity("Model.GuideLanguage", b =>
                {
                    b.Property<int>("GuideId");

                    b.Property<int>("LanguageId");

                    b.HasKey("GuideId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("GuideLanguage");
                });

            modelBuilder.Entity("Model.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("LanguageId");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Model.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BookingId");

                    b.Property<int?>("GuideId");

                    b.Property<string>("Text");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<int?>("TravelerId");

                    b.HasKey("MessageId");

                    b.HasIndex("BookingId");

                    b.HasIndex("GuideId");

                    b.HasIndex("TravelerId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Model.Place", b =>
                {
                    b.Property<int>("PlaceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("PhotoUrl");

                    b.Property<int>("PlaceTypeId");

                    b.Property<string>("WorkingHours");

                    b.HasKey("PlaceId");

                    b.HasIndex("CityId");

                    b.HasIndex("PlaceTypeId");

                    b.ToTable("Place");
                });

            modelBuilder.Entity("Model.PlaceType", b =>
                {
                    b.Property<int>("PlaceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PlaceTypeName");

                    b.HasKey("PlaceTypeId");

                    b.ToTable("PlaceType");
                });

            modelBuilder.Entity("Model.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("ScheduleId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("Model.ScheduleItem", b =>
                {
                    b.Property<int>("ScheduleItemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccommodationId");

                    b.Property<string>("Content");

                    b.Property<int?>("PlaceId");

                    b.Property<int>("ScheduleId");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<string>("Url");

                    b.HasKey("ScheduleItemId");

                    b.HasIndex("AccommodationId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleItem");
                });

            modelBuilder.Entity("Model.Tour", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("Duration");

                    b.Property<bool>("IsTemplate");

                    b.Property<string>("Name");

                    b.Property<string>("PhotoUrl");

                    b.HasKey("TourId");

                    b.ToTable("Tour");
                });

            modelBuilder.Entity("Model.TourCountry", b =>
                {
                    b.Property<int>("TourId");

                    b.Property<int>("CountryId");

                    b.HasKey("TourId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("TourCountry");
                });

            modelBuilder.Entity("Model.TourSection", b =>
                {
                    b.Property<int>("TourSectionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<string>("Title");

                    b.Property<int>("TourId");

                    b.HasKey("TourSectionId");

                    b.HasIndex("TourId");

                    b.ToTable("TourSection");
                });

            modelBuilder.Entity("Model.Transport", b =>
                {
                    b.Property<int>("TransportId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("PhotoUrl");

                    b.Property<int>("TransportTypeId");

                    b.Property<string>("WebsiteUrl");

                    b.HasKey("TransportId");

                    b.HasIndex("CityId");

                    b.HasIndex("TransportTypeId");

                    b.ToTable("Transport");
                });

            modelBuilder.Entity("Model.TransportType", b =>
                {
                    b.Property<int>("TransportTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("TransportTypeId");

                    b.ToTable("TransportType");
                });

            modelBuilder.Entity("Model.Traveler", b =>
                {
                    b.Property<int>("TravelerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<string>("Username");

                    b.HasKey("TravelerId");

                    b.ToTable("Traveler");
                });

            modelBuilder.Entity("Model.Accommodation", b =>
                {
                    b.HasOne("Model.AccommodationType", "AccommodationType")
                        .WithMany()
                        .HasForeignKey("AccommodationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.AccommodationAmenity", b =>
                {
                    b.HasOne("Model.Accommodation", "Accommodation")
                        .WithMany("AccommodationAmenity")
                        .HasForeignKey("AccommodationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Amenity", "Amenity")
                        .WithMany("AccommodationAmenity")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Amenity", b =>
                {
                    b.HasOne("Model.AmenityType", "AmenityType")
                        .WithMany()
                        .HasForeignKey("AmenityTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Booking", b =>
                {
                    b.HasOne("Model.Guide", "Guide")
                        .WithMany()
                        .HasForeignKey("GuideId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.BookingTraveler", b =>
                {
                    b.HasOne("Model.Booking", "Booking")
                        .WithMany("BookingTraveler")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Traveler", "Traveler")
                        .WithMany("BookingTraveler")
                        .HasForeignKey("TravelerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.City", b =>
                {
                    b.HasOne("Model.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.CitySection", b =>
                {
                    b.HasOne("Model.City")
                        .WithMany("Sections")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.CountrySection", b =>
                {
                    b.HasOne("Model.Country")
                        .WithMany("Sections")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Day", b =>
                {
                    b.HasOne("Model.Accommodation", "Accommodation")
                        .WithMany()
                        .HasForeignKey("AccommodationId");

                    b.HasOne("Model.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId");

                    b.HasOne("Model.Tour")
                        .WithMany("Day")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.DayCity", b =>
                {
                    b.HasOne("Model.City", "City")
                        .WithMany("DayCity")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Day", "Day")
                        .WithMany("DayCity")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.DayCountry", b =>
                {
                    b.HasOne("Model.Country", "Country")
                        .WithMany("DayCountry")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Day", "Day")
                        .WithMany("DayCountry")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.GuideLanguage", b =>
                {
                    b.HasOne("Model.Guide", "Guide")
                        .WithMany("GuideLanguage")
                        .HasForeignKey("GuideId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Language", "Language")
                        .WithMany("GuideLanguage")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Message", b =>
                {
                    b.HasOne("Model.Booking")
                        .WithMany("Messages")
                        .HasForeignKey("BookingId");

                    b.HasOne("Model.Guide", "Guide")
                        .WithMany()
                        .HasForeignKey("GuideId");

                    b.HasOne("Model.Traveler", "Traveler")
                        .WithMany()
                        .HasForeignKey("TravelerId");
                });

            modelBuilder.Entity("Model.Place", b =>
                {
                    b.HasOne("Model.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.PlaceType", "PlaceType")
                        .WithMany()
                        .HasForeignKey("PlaceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.ScheduleItem", b =>
                {
                    b.HasOne("Model.Accommodation", "Accommodation")
                        .WithMany()
                        .HasForeignKey("AccommodationId");

                    b.HasOne("Model.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");

                    b.HasOne("Model.Schedule", "Schedule")
                        .WithMany("ScheduleItems")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.TourCountry", b =>
                {
                    b.HasOne("Model.Country", "Country")
                        .WithMany("TourCountry")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Tour", "Tour")
                        .WithMany("TourCountry")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.TourSection", b =>
                {
                    b.HasOne("Model.Tour")
                        .WithMany("Sections")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Transport", b =>
                {
                    b.HasOne("Model.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.TransportType", "TransportType")
                        .WithMany()
                        .HasForeignKey("TransportTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
